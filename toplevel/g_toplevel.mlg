(************************************************************************)
(*         *   The Coq Proof Assistant / The Coq Development Team       *)
(*  v      *   INRIA, CNRS and contributors - Copyright 1999-2019       *)
(* <O___,, *       (see CREDITS file for the list of authors)           *)
(*   \VV/  **************************************************************)
(*    //   *    This file is distributed under the terms of the         *)
(*         *     GNU Lesser General Public License Version 2.1          *)
(*         *     (see LICENSE file for the text of the license)         *)
(************************************************************************)

{
open Pcoq
open Pcoq.Prim
open Tok
open Util
open Vernacexpr

(* Vernaculars specific to the toplevel *)
type vernac_toplevel =
  | VernacBacktrack of int * int * int
  | VernacDrop
  | VernacQuit
  | VernacControl of vernac_control
  | VernacShowGoal of { gid : int; sid: int }

module Toplevel_ : sig
  val vernac_toplevel : vernac_toplevel option Entry.t
end = struct
  let gec_vernac s = Entry.create ("toplevel:" ^ s)
  let vernac_toplevel = gec_vernac "vernac_toplevel"
end

open Toplevel_

let err () = raise Stream.Failure

let test_show_goal =
  Pcoq.Entry.of_parser "test_show_goal"
    (fun strm ->
      match stream_nth 0 strm with
      | IDENT "Show" ->
          (match stream_nth 1 strm with
          | IDENT "Goal" ->
            (match stream_nth 2 strm with
              | NUMERAL _ -> ()
              | _ -> err ())
          | _ -> err ())
      | _ -> err ())

}

GRAMMAR EXTEND Gram
  GLOBAL: vernac_toplevel;
  vernac_toplevel: FIRST
    [ [ IDENT "Drop"; "." -> { Some VernacDrop }
      | IDENT "Quit"; "." -> { Some VernacQuit }
      | IDENT "Backtrack"; n = natural ; m = natural ; p = natural; "." ->
        { Some (VernacBacktrack (n,m,p)) }
      (* show a goal for the specified proof state *)
      | test_show_goal; IDENT "Show"; IDENT "Goal"; gid = natural; IDENT "at"; sid = natural; "." ->
          { Some (VernacShowGoal {gid; sid}) }
      | cmd = Pvernac.Vernac_.main_entry ->
              { match cmd with
              | None -> None
              | Some v -> Some (VernacControl v) }
      ]
    ]
  ;
END

{

let vernac_toplevel pm =
  Pvernac.Unsafe.set_tactic_entry pm;
  vernac_toplevel

}
